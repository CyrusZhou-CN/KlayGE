SET(PY_VERSION_MAJOR 3)
SET(PY_VERSION_MINOR 12)
SET(PY_VERSION_PATCH 1)
SET(PY_VERSION "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}.${PY_VERSION_PATCH}")

SET(PYTHON_PROJECT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/cpython")

UpdateExternalLib("cpython" "https://github.com/python/cpython.git" "2305ca51448552542b2414186252123a8dc87db7" "v${PY_VERSION}" "v3.12.0" need_patch)
if(need_patch)
	foreach(patch "0001-Fix-for-MinGW" "0002-Fix-for-UWP" "0003-Make-winreg-optional-on-Windows")
		ApplyPatch("cpython" "${CMAKE_CURRENT_SOURCE_DIR}/Patches/cpython/${patch}.patch")
	endforeach()
endif()

UpdateExternalLib("python-cmake-buildsystem" "https://github.com/python-cmake-buildsystem/python-cmake-buildsystem" "11a369e29b1be82e3b3108259ab89b7095854b47" "" "" need_patch)
if(need_patch)
	foreach(patch "0001-Enable-ASM-langage-only-if-required" "0002-Fix-android-build-by-linking-against-libutil-only-if"
		"0003-Fix-build-error-when-curses-is-enabled-but-curses-he" "0004-Fix-android-build-error-specifying-multiprocessing-e"
		"0005-Fix-android-build-error-specifying-audiodev-extensio" "0006-Make-building-python-executable-python-development-f"
		"0007-Fix-some-problems-with-Android-and-iOS" "0008-Update-pyconfig.h-for-mingw"
		"0009-No-need-to-dereference-system-variables-in-if" "0010-Fix-redefined-_POSIX_THREADS-and-_POSIX_SOURCE-on-Li"
		"0011-Add-support-for-Python-3.10" "0012-Add-limited-Python-3.11-support" "0013-Add-limited-Python-3.12-support"
		"0014-Make-winreg-optional-on-Windows")
		ApplyPatch("python-cmake-buildsystem" "${CMAKE_CURRENT_SOURCE_DIR}/Patches/python-cmake-buildsystem/${patch}.patch")
	endforeach()
endif()

SET(SRC_DIR ${PYTHON_PROJECT_DIR})

FOREACH(flag_var
		CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
	IF(KLAYGE_COMPILER_MSVC)
		SET(${flag_var} "${${flag_var}} /wd4273 /wd4013 /wd4133 /wd4703")
	ENDIF()
ENDFOREACH()
IF(KLAYGE_COMPILER_MSVC)
	string(REPLACE "/WX" "/WX:NO" CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS}")
ENDIF()

IF(ANDROID OR IOS)
	SET(UNIX OFF)
	SET(LINUX OFF)
ENDIF()

SET(PYTHON_VERSION ${PY_VERSION} CACHE STRING "" FORCE)

set(BUILD_PYTHON_EXECUTABLE ON CACHE BOOL "" FORCE)
set(BUILD_PYTHON_DEVELOPMENT OFF CACHE BOOL "" FORCE)
if(CMAKE_CROSSCOMPILING)
	set(BUILD_FREEZE_IMPORTLIB OFF CACHE BOOL "" FORCE)
else()
	set(BUILD_FREEZE_IMPORTLIB ON CACHE BOOL "" FORCE)
endif()
set(BUILD_PGEN OFF CACHE BOOL "" FORCE)

set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel" CACHE STRING "" FORCE)

set(DOWNLOAD_SOURCES OFF CACHE BOOL "" FORCE)
set(BUILD_LIBPYTHON_SHARED OFF CACHE BOOL "" FORCE)

set(BUILD_EXTENSIONS_AS_BUILTIN ON CACHE BOOL "" FORCE)
set(BUILD_WININST OFF CACHE BOOL "" FORCE)
set(ENABLE_ABC ON CACHE BOOL "" FORCE)
set(ENABLE_ARRAY OFF CACHE BOOL "" FORCE)
set(ENABLE_ATEXIT ON CACHE BOOL "" FORCE)
set(ENABLE_AUDIOOP OFF CACHE BOOL "" FORCE)
set(ENABLE_ASYNCIO OFF CACHE BOOL "" FORCE)
set(ENABLE_BINASCII OFF CACHE BOOL "" FORCE)
set(ENABLE_BISECT OFF CACHE BOOL "" FORCE)
set(ENABLE_BLAKE2 OFF CACHE BOOL "" FORCE)
set(ENABLE_BZ2 OFF CACHE BOOL "" FORCE)
set(ENABLE_CMATH OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS ON CACHE BOOL "" FORCE)
set(ENABLE_CODECS_CN OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_HK OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_ISO2022 OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_JP OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_KR OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_TW OFF CACHE BOOL "" FORCE)
set(ENABLE_COLLECTIONS OFF CACHE BOOL "" FORCE)
set(ENABLE_CONTEXTVARS OFF CACHE BOOL "" FORCE)
set(ENABLE_CRYPT OFF CACHE BOOL "" FORCE)
set(ENABLE_CSV OFF CACHE BOOL "" FORCE)
set(ENABLE_CTYPES OFF CACHE BOOL "" FORCE)
set(ENABLE_CTYPES_TEST OFF CACHE BOOL "" FORCE)
set(ENABLE_CURSES OFF CACHE BOOL "" FORCE)
set(ENABLE_CURSES_PANEL OFF CACHE BOOL "" FORCE)
set(ENABLE_DATETIME OFF CACHE BOOL "" FORCE)
set(ENABLE_DISTUTILS_FINDVS OFF CACHE BOOL "" FORCE)
set(ENABLE_DBM OFF CACHE BOOL "" FORCE)
set(ENABLE_DECIMAL OFF CACHE BOOL "" FORCE)
set(ENABLE_ELEMENTTREE OFF CACHE BOOL "" FORCE)
set(ENABLE_ERRNO OFF CACHE BOOL "" FORCE)
set(ENABLE_FAULTHANDLER ON CACHE BOOL "" FORCE)
set(ENABLE_FUNCTOOLS OFF CACHE BOOL "" FORCE)
set(ENABLE_GDBM OFF CACHE BOOL "" FORCE)
set(ENABLE_HASHLIB OFF CACHE BOOL "" FORCE)
set(ENABLE_HEAPQ OFF CACHE BOOL "" FORCE)
set(ENABLE_IO ON CACHE BOOL "" FORCE)
set(ENABLE_IPV6 OFF CACHE BOOL "" FORCE)
set(ENABLE_ITERTOOLS OFF CACHE BOOL "" FORCE)
set(ENABLE_JSON OFF CACHE BOOL "" FORCE)
set(ENABLE_LOCALE OFF CACHE BOOL "" FORCE)
set(ENABLE_LSPROF OFF CACHE BOOL "" FORCE)
set(ENABLE_LZMA OFF CACHE BOOL "" FORCE)
set(ENABLE_MATH ON CACHE BOOL "" FORCE)
set(ENABLE_MMAP OFF CACHE BOOL "" FORCE)
set(ENABLE_MSI OFF CACHE BOOL "" FORCE)
set(ENABLE_MSVCRT OFF CACHE BOOL "" FORCE)
set(ENABLE_MULTIBYTECODEC OFF CACHE BOOL "" FORCE)
set(ENABLE_MULTIPROCESSING OFF CACHE BOOL "" FORCE)
set(ENABLE_OPCODE OFF CACHE BOOL "" FORCE)
set(ENABLE_OPERATOR OFF CACHE BOOL "" FORCE)
set(ENABLE_OSSAUDIODEV OFF CACHE BOOL "" FORCE)
set(ENABLE_OVERLAPPED OFF CACHE BOOL "" FORCE)
set(ENABLE_PICKLE OFF CACHE BOOL "" FORCE)
set(ENABLE_PYEXPAT OFF CACHE BOOL "" FORCE)
set(ENABLE_QUEUE OFF CACHE BOOL "" FORCE)
set(ENABLE_RANDOM OFF CACHE BOOL "" FORCE)
set(ENABLE_READLINE OFF CACHE BOOL "" FORCE)
set(ENABLE_SCPROXY OFF CACHE BOOL "" FORCE)
set(ENABLE_SELECT OFF CACHE BOOL "" FORCE)
set(ENABLE_SOCKET OFF CACHE BOOL "" FORCE)
set(ENABLE_SPWD OFF CACHE BOOL "" FORCE)
set(ENABLE_SQLITE3 OFF CACHE BOOL "" FORCE)
set(ENABLE_SRE OFF CACHE BOOL "" FORCE)
set(ENABLE_SSL OFF CACHE BOOL "" FORCE)
set(ENABLE_STAT OFF CACHE BOOL "" FORCE)
set(ENABLE_STRUCT OFF CACHE BOOL "" FORCE)
set(ENABLE_SUBPROCESS OFF CACHE BOOL "" FORCE)
set(ENABLE_SYMTABLE OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTBUFFER OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTCAPI OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTCONSOLE OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTIMPORTMULTIPLE OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTINTERNALCAPI OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTMULTIPHASE OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTSINGLEPHASE OFF CACHE BOOL "" FORCE)
set(ENABLE_THREAD ON CACHE BOOL "" FORCE)
set(ENABLE_TKINTER OFF CACHE BOOL "" FORCE)
set(ENABLE_TIME ON CACHE BOOL "" FORCE)
set(ENABLE_TRACEMALLOC ON CACHE BOOL "" FORCE)
set(ENABLE_UNICODEDATA OFF CACHE BOOL "" FORCE)
set(ENABLE_UUID OFF CACHE BOOL "" FORCE)
set(ENABLE_WEAKREF ON CACHE BOOL "" FORCE)
set(ENABLE_WINAPI OFF CACHE BOOL "" FORCE)
set(ENABLE_WMI OFF CACHE BOOL "" FORCE)
set(ENABLE_XXLIMITED OFF CACHE BOOL "" FORCE)
set(ENABLE_XXSUBTYPE OFF CACHE BOOL "" FORCE)
set(ENABLE_XXTESTFUZZ OFF CACHE BOOL "" FORCE)
set(ENABLE_ZLIB OFF CACHE BOOL "" FORCE)
if(KLAYGE_PLATFORM_WINDOWS)
	set(ENABLE_NT ON CACHE BOOL "" FORCE)
	set(ENABLE_WINREG OFF CACHE BOOL "" FORCE)
elseif(KLAYGE_PLATFORM_LINUX)
	set(ENABLE_FCNTL OFF CACHE BOOL "" FORCE)
	set(ENABLE_GRP OFF CACHE BOOL "" FORCE)
	set(ENABLE_NIS OFF CACHE BOOL "" FORCE)
	set(ENABLE_POSIX ON CACHE BOOL "" FORCE)
	set(ENABLE_POSIXSHMEM OFF CACHE BOOL "" FORCE)
	set(ENABLE_POSIXSUBPROCESS OFF CACHE BOOL "" FORCE)
	set(ENABLE_PWD OFF CACHE BOOL "" FORCE)
	set(ENABLE_RESOURCE OFF CACHE BOOL "" FORCE)
	set(ENABLE_SYSLOG OFF CACHE BOOL "" FORCE)
	set(ENABLE_TERMIOS OFF CACHE BOOL "" FORCE)
endif()
set(INSTALL_DEVELOPMENT OFF CACHE BOOL "" FORCE)
set(INSTALL_MANUAL OFF CACHE BOOL "" FORCE)
set(INSTALL_TEST OFF CACHE BOOL "" FORCE)
set(INSTALL_WINDOWS_TRADITIONAL OFF CACHE BOOL "" FORCE)
set(PYTHON_APPLY_PATCHES OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_BZip2 OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_Curses OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_EXPAT OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_FFI ON CACHE BOOL "" FORCE)
set(USE_SYSTEM_GDBM OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_OpenSSL OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_READLINE OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_TCL OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_ZLIB OFF CACHE BOOL "" FORCE)
set(WITH_COMPUTED_GOTOS OFF CACHE BOOL "" FORCE)
set(WITH_DOC_STRINGS OFF CACHE BOOL "" FORCE)
set(WITH_TSC OFF CACHE BOOL "" FORCE)
set(USE_BUILTIN_ZLIB OFF CACHE BOOL "" FORCE)

set(_download_${PY_VERSION}_md5 "")

IF(CMAKE_CROSSCOMPILING)
	STRING(TOLOWER ${CMAKE_SYSTEM_NAME} lc_system_name)
	IF(APPLE)
		SET(PLATFORM_RUN__TRYRUN_OUTPUT "${lc_system_name}")
	ELSE()
		SET(PLATFORM_RUN__TRYRUN_OUTPUT "${CMAKE_SYSTEM_PROCESSOR}-${lc_system_name}")
	ENDIF()
	SET(PLATFORM_RUN "0")

	SET(HAVE_MMAP_DEV_ZERO_EXITCODE 1)
	SET(HAVE_BROKEN_NICE_EXITCODE 1)
	SET(HAVE_BROKEN_POLL_EXITCODE 1)

	# These flags needs to be reverted
	set(TANH_PRESERVES_ZERO_SIGN 0)
	set(TANH_PRESERVES_ZERO_SIGN_COMPILED ON)
	set(LOG1P_DROPS_ZERO_SIGN 1)
	set(LOG1P_DROPS_ZERO_SIGN_COMPILED ON)
	set(DOUBLE_IS_LITTLE_ENDIAN_IEEE754 0)
	set(DOUBLE_IS_LITTLE_ENDIAN_IEEE754_COMPILED ON)
	set(DOUBLE_IS_BIG_ENDIAN_IEEE754 1)
	set(DOUBLE_IS_BIG_ENDIAN_IEEE754_COMPILED ON)
	set(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754 1)
	set(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754_COMPILED ON)
	set(X87_DOUBLE_ROUNDING 1)
	set(X87_DOUBLE_ROUNDING_COMPILED ON)
	set(POSIX_SEMAPHORES_NOT_ENABLED 1)
	set(POSIX_SEMAPHORES_NOT_ENABLED_COMPILED ON)
	set(HAVE_BROKEN_SEM_GETVALUE 1)
	set(HAVE_BROKEN_SEM_GETVALUE_COMPILED ON)
	set(HAVE_WORKING_TZSET 1)
	set(HAVE_WORKING_TZSET_COMPILED ON)
	set(HAVE_ALIGNED_REQUIRED 1)
	set(HAVE_ALIGNED_REQUIRED_COMPILED ON)
	set(HAVE_BROKEN_MBSTOWCS 1)
	set(HAVE_BROKEN_MBSTOWCS_COMPILED ON)
	set(HAVE_COMPUTED_GOTOS 1)
	set(HAVE_COMPUTED_GOTOS_COMPILED ON)
	set(HAVE_GLIBC_MEMMOVE_BUG 1)
	set(HAVE_GLIBC_MEMMOVE_BUG_COMPILED ON)
	set(HAVE_LONG_LONG_FORMAT 1)
	set(HAVE_LONG_LONG_FORMAT_COMPILED ON)
	set(HAVE_SIZE_T_FORMAT 1)
	set(HAVE_SIZE_T_FORMAT_COMPILED ON)
ENDIF()

IF(ANDROID OR IOS)
	set(WITH_STATIC_DEPENDENCIES ON)
ENDIF()

ADD_SUBDIRECTORY(python-cmake-buildsystem)

if(KLAYGE_COMPILER_CLANGCL)
	target_compile_options(libpython-static
		PUBLIC
			-Wno-disabled-macro-expansion

		PRIVATE
			-Wno-invalid-token-paste
			-w
			/Od # lld-link can't find __powidf2
	)
	if(TARGET _freeze_importlib)
		target_compile_options(_freeze_importlib
			PRIVATE
				-Wno-invalid-token-paste
				-w
		)
	endif()

	target_compile_definitions(libpython-static
		PRIVATE
			_CRT_SECURE_NO_WARNINGS
	)
endif()

target_compile_definitions(libpython-static
	PRIVATE
		Py_BUILD_CORE
)
if(TARGET _freeze_importlib)
	target_compile_definitions(_freeze_importlib
		PRIVATE
			Py_NO_ENABLE_SHARED
	)
endif()
if(KLAYGE_COMPILER_MSVC AND (MSVC_VERSION GREATER 1800))
	target_compile_definitions(libpython-static
		PRIVATE
			_CRT_NON_CONFORMING_WCSTOK
	)
endif()
if(KLAYGE_PLATFORM_WINDOWS)
	target_compile_definitions(libpython-static
		PRIVATE
			PY3_DLLNAME="python3"
	)

	if(KLAYGE_PLATFORM_WINDOWS_STORE)
		target_compile_definitions(libpython-static
			PRIVATE
				_WIN32_WINNT=0x0A00
				WINVER=0x0A00
				NTDDI_VERSION=0x0A000000
		)
	endif()
endif()
if(TARGET freeze_modules)
	add_dependencies(libpython-static freeze_modules)
endif()

if(KLAYGE_PLATFORM_WINDOWS)
	if(KLAYGE_COMPILER_MSVC OR KLAYGE_COMPILER_CLANGCL)
		set(PYCONFIG_BUILD_DIR ${PYTHON_PROJECT_DIR}/PC)
	else()
		set(PYCONFIG_BUILD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/python-cmake-buildsystem/cmake/config-mingw)
	endif()
else()
	set(PYCONFIG_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/python-cmake-buildsystem/bin)
endif()
target_include_directories(libpython-static
	PUBLIC
		${PYTHON_PROJECT_DIR}/Include
		${PYCONFIG_BUILD_DIR}
)

SET_TARGET_PROPERTIES(libpython-static PROPERTIES
	FOLDER "Externals/Python"
)
if(TARGET _freeze_importlib)
	SET_TARGET_PROPERTIES(_freeze_importlib PROPERTIES
		FOLDER "Externals/Python"
	)
endif()
if(TARGET freeze_modules)
	set_target_properties(freeze_modules PROPERTIES
		FOLDER "Externals/Python"
	)
endif()

add_dependencies(libpython-static ${KLAYGE_ZLIB_NAME})
